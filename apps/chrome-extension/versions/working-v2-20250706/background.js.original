(()=>{"use strict";class e{buffer="";chunks=[];addChunk(e){this.buffer+=e;const t=this.buffer.split("\n\n");this.buffer=t.pop()||"",this.chunks.push(...t.filter(e=>e.trim()))}getChunks(){return this.chunks}hasCompleteChunks(){return this.chunks.length>0}clear(){this.buffer="",this.chunks=[]}}function t(t){if("string"==typeof t)return function(t){const o=new e;o.addChunk(t);let n="unknown",r=0,s=0,a=0;for(const e of o.getChunks())try{const t=e.replace(/^data:\s*/,"");if("[DONE]"===t)continue;const o=JSON.parse(t);o.model&&(n=o.model),o.usage&&(r=o.usage.prompt_tokens||r,s=o.usage.completion_tokens||s,a=o.usage.total_tokens||a)}catch(e){continue}return{model:n,tokens:{prompt:r,completion:s,total:a}}}(t);const o=t.usage||{};return{model:t.model||"unknown",tokens:{prompt:o.prompt_tokens||0,completion:o.completion_tokens||0,total:o.total_tokens||0}}}function o(t){if("string"==typeof t)return function(t){const o=new e;o.addChunk(t);let n="unknown",r=0,s=0;for(const e of o.getChunks())try{const t=e.replace(/^data:\s*/,"");if("[DONE]"===t)continue;const o=JSON.parse(t);o.model&&(n=o.model),o.usage&&(r=o.usage.input_tokens||r,s=o.usage.output_tokens||s),"message_stop"===o.type&&o.usage&&(r=o.usage.input_tokens||r,s=o.usage.output_tokens||s)}catch(e){continue}return{model:n,tokens:{prompt:r,completion:s,total:r+s}}}(t);const o=t.usage||{};return{model:t.model||"unknown",tokens:{prompt:o.input_tokens||0,completion:o.output_tokens||0,total:(o.input_tokens||0)+(o.output_tokens||0)}}}function n(t){if("string"==typeof t)return function(t){const o=new e;o.addChunk(t);let n="unknown",r=0,s=0,a=0;for(const e of o.getChunks())try{const t=JSON.parse(e);t.model&&(n=t.model),t.usageMetadata&&(r=t.usageMetadata.promptTokenCount||r,s=t.usageMetadata.candidatesTokenCount||s,a=t.usageMetadata.totalTokenCount||a)}catch(e){continue}return{model:n,tokens:{prompt:r,completion:s,total:a}}}(t);const o=t.usageMetadata||{};return{model:t.model||"unknown",tokens:{prompt:o.promptTokenCount||0,completion:o.candidatesTokenCount||0,total:o.totalTokenCount||0}}}function r(t){if("string"==typeof t)return function(t){const o=new e;o.addChunk(t);let n="unknown",r=0,s=0;for(const e of o.getChunks())try{const t=JSON.parse(e);if((t.model||t.modelId)&&(n=t.model||t.modelId),t.usage&&(r=t.usage.inputTokens||r,s=t.usage.outputTokens||s),t["amazon-bedrock-invocationMetrics"]){const e=t["amazon-bedrock-invocationMetrics"];r=e.inputTokenCount||r,s=e.outputTokenCount||s}}catch(e){continue}return{model:n,tokens:{prompt:r,completion:s,total:r+s}}}(t);const o=t.usage||{};return{model:t.model||t.modelId||"unknown",tokens:{prompt:o.inputTokens||0,completion:o.outputTokens||0,total:o.totalTokens||(o.inputTokens||0)+(o.outputTokens||0)}}}function s(e,s){if(s)switch(s.toLowerCase()){case"openai":return t(e);case"anthropic":return o(e);case"google":return n(e);case"bedrock":return r(e);default:throw new Error(`Unsupported provider: ${s}`)}if("object"==typeof e&&null!==e){if(e.usage&&"prompt_tokens"in e.usage)return t(e);if(e.usage&&"input_tokens"in e.usage)return o(e);if(e.usageMetadata&&"promptTokenCount"in e.usageMetadata)return n(e);if(e.usage&&"inputTokens"in e.usage)return r(e)}return{model:"unknown",tokens:{prompt:0,completion:0,total:0}}}const a="0.1.0",i=new class{lastLogTime=0;throttleMs=1e3;log(e,...t){const o=Date.now();o-this.lastLogTime>=this.throttleMs&&(console.log(e,...t),this.lastLogTime=o)}error(e,t){const o=Date.now();o-this.lastLogTime>=this.throttleMs&&(console.error(e,t),this.lastLogTime=o)}},c=["*://api.openai.com/v1/chat/completions","*://api.anthropic.com/v1/messages","*://generativelanguage.googleapis.com/v1*/models/*:generateContent","*://bedrock*.amazonaws.com/model/*/invoke*","*://chat.openai.com/backend-api/conversation","*://claude.ai/api/organizations/*/chat_conversations/*/completion","*://bard.google.com/_/BardChatUi/data/assistant.lamda.BardFrontendService/*","*://gemini.google.com/_/BardChatUi/data/assistant.lamda.BardFrontendService/*"],l=new Map;const m=new class{cache=new Map;DEFAULT_TTL=3e5;set(e,t,o=this.DEFAULT_TTL){this.cache.set(e,{data:t,timestamp:Date.now(),ttl:o})}get(e){const t=this.cache.get(e);return t?Date.now()-t.timestamp>t.ttl?(this.cache.delete(e),null):t.data:null}invalidate(e){const t=new RegExp(e);for(const e of this.cache.keys())t.test(e)&&this.cache.delete(e)}clear(){this.cache.clear()}size(){return this.cache.size}};async function u(e){const t=Array.isArray(e)?e:[e],o=t.sort().join(","),n=m.get(o);if(n)return i.log(`Cache hit for keys: ${o}`),n;const r=await new Promise((e,o)=>{chrome.storage.local.get(t,t=>{chrome.runtime.lastError?o(new Error(chrome.runtime.lastError.message)):e(t)})}),s=t.some(e=>e.includes("aggregate"))?12e4:3e4;return m.set(o,r,s),i.log(`Cache miss, fetched from storage: ${o}`),r}function g(e){e.forEach(e=>{if(m.invalidate(e),e.startsWith("qarbon_emissions_")){const t=e.split("_").pop();if(t){m.invalidate(`qarbon_aggregates_daily_${t}`);const e=new Date(t),o=p(e),n=d(e);m.invalidate(`qarbon_aggregates_week_${o}`),m.invalidate(`qarbon_aggregates_month_${n}`)}}}),i.log(`Invalidated cache for keys: ${e.join(", ")}`)}function p(e){const t=e.getFullYear(),o=function(e){const t=new Date(e.getFullYear(),0,1),o=(e.getTime()-t.getTime())/864e5;return Math.ceil((o+t.getDay()+1)/7)}(e);return`${t}W${o.toString().padStart(2,"0")}`}function d(e){return`${e.getFullYear()}M${(e.getMonth()+1).toString().padStart(2,"0")}`}function h(e){const t=e.getDay(),o=e.getDate()-t;return new Date(e.setDate(o))}function k(e){const t=h(new Date(e));return new Date(t.getTime()+5184e5)}function w(e){return new Date(e.getFullYear(),e.getMonth(),1)}function f(e){return new Date(e.getFullYear(),e.getMonth()+1,0)}async function y(){try{const e=await new Promise((e,t)=>{chrome.storage.local.get(null,o=>{chrome.runtime.lastError?t(new Error(chrome.runtime.lastError.message)):e(o)})}),t=(e.qarbon_settings||{dataRetentionDays:30}).dataRetentionDays||30,o=new Date;o.setDate(o.getDate()-t);const n=o.toISOString().split("T")[0],r=[];Object.keys(e).forEach(e=>{if(e.startsWith("qarbon_emissions_")||e.startsWith("qarbon_prompts_")){const t=e.split("_").pop();t&&n&&t<n&&r.push(e)}if(e.startsWith("qarbon_aggregates_daily_")){const t=e.split("_").pop();t&&n&&t<n&&r.push(e)}}),r.length>0&&await new Promise((e,t)=>{chrome.storage.local.remove(r,()=>{chrome.runtime.lastError?t(new Error(chrome.runtime.lastError.message)):(i.log(`Cleaned up ${r.length} old data entries`),e())})})}catch(e){i.error("Error cleaning up old data:",e)}}chrome.runtime.onMessage.addListener(async(e,t,o)=>{if("PROMPT_CAPTURE"!==e.type){if("API_RESPONSE_CAPTURED"!==e.type){if("GET_STORAGE_DATA"===e.type)return chrome.storage.local.get(null,e=>{chrome.runtime.lastError?o({error:chrome.runtime.lastError.message}):o({data:e})}),!0;if("CLEAR_STORAGE_DATA"===e.type){const e=["qarbon_settings"];return chrome.storage.local.get(null,t=>{if(chrome.runtime.lastError)return void o({error:chrome.runtime.lastError.message});const n=Object.keys(t).filter(t=>!e.includes(t));n.length>0?chrome.storage.local.remove(n,()=>{chrome.runtime.lastError?o({error:chrome.runtime.lastError.message}):o({success:!0,removedCount:n.length})}):o({success:!0,removedCount:0})}),!0}return!1}try{const{url:t,responseBody:o}=e;if(!function(e){return c.some(t=>new RegExp(t.replace(/\*/g,".*")).test(e))}(t))return;const n=function(e){return e.includes("openai.com")?"openai":e.includes("anthropic.com")?"anthropic":e.includes("googleapis.com")?"gemini":e.includes("amazonaws.com")?"bedrock":e.includes("claude.ai")?"claude":e.includes("bard.google.com")||e.includes("gemini.google.com")?"bard":null}(t);if(!n)return void i.error("Unknown AI provider for URL:",t);const r=await async function(e,t,o){const n=Date.now(),r=.001;try{switch(e){case"openai":return function(e,t,o,n){try{if(!t)return{model:"unknown",tokens:{total:0,prompt:0,completion:0},timestamp:o,energyPerToken:n};let e;try{e=JSON.parse(t)}catch{e=t}const r=s(e,"openai");return{model:r.model,tokens:{total:r.tokens.total,prompt:r.tokens.prompt,completion:r.tokens.completion},timestamp:o,energyPerToken:n}}catch(e){return i.error("Error parsing OpenAI response:",e),{model:"unknown",tokens:{total:0,prompt:0,completion:0},timestamp:o,energyPerToken:n}}}(0,o,n,r);case"anthropic":return function(e,t,o,n){try{if(!t)return{model:"unknown",tokens:{total:0,prompt:0,completion:0},timestamp:o,energyPerToken:n};let e;try{e=JSON.parse(t)}catch{e=t}const r=s(e,"anthropic");return{model:r.model,tokens:{total:r.tokens.total,prompt:r.tokens.prompt,completion:r.tokens.completion},timestamp:o,energyPerToken:n}}catch(e){return i.error("Error parsing Anthropic response:",e),{model:"unknown",tokens:{total:0,prompt:0,completion:0},timestamp:o,energyPerToken:n}}}(0,o,n,r);case"gemini":return function(e,t,o,n){try{if(!t)return{model:"unknown",tokens:{total:0,prompt:0,completion:0},timestamp:o,energyPerToken:n};let e;try{e=JSON.parse(t)}catch{e=t}const r=s(e,"google");return{model:r.model,tokens:{total:r.tokens.total,prompt:r.tokens.prompt,completion:r.tokens.completion},timestamp:o,energyPerToken:n}}catch(e){return i.error("Error parsing Google response:",e),{model:"unknown",tokens:{total:0,prompt:0,completion:0},timestamp:o,energyPerToken:n}}}(0,o,n,r);case"bedrock":return function(e,t,o,n){try{if(!t)return{model:"unknown",tokens:{total:0,prompt:0,completion:0},timestamp:o,energyPerToken:n};let e;try{e=JSON.parse(t)}catch{e=t}const r=s(e,"bedrock");return{model:r.model,tokens:{total:r.tokens.total,prompt:r.tokens.prompt,completion:r.tokens.completion},timestamp:o,energyPerToken:n}}catch(e){return i.error("Error parsing Bedrock response:",e),{model:"unknown",tokens:{total:0,prompt:0,completion:0},timestamp:o,energyPerToken:n}}}(0,o,n,r);case"claude":return function(e,t,o,n){try{if(!t)return{model:"claude-web",tokens:{total:0,prompt:0,completion:0},timestamp:o,energyPerToken:n};const e=s(t,"anthropic");return{model:e.model||"claude-web",tokens:{total:e.tokens.total,prompt:e.tokens.prompt,completion:e.tokens.completion},timestamp:o,energyPerToken:n}}catch(e){return i.error("Error parsing Claude web response:",e),{model:"claude-web",tokens:{total:95,prompt:50,completion:45},timestamp:o,energyPerToken:n}}}(0,o,n,r);case"bard":return function(e,t,o,n){try{if(!t)return{model:"bard-web",tokens:{total:0,prompt:0,completion:0},timestamp:o,energyPerToken:n};const e=s(t,"google");return{model:e.model||"bard-web",tokens:{total:e.tokens.total,prompt:e.tokens.prompt,completion:e.tokens.completion},timestamp:o,energyPerToken:n}}catch(e){return i.error("Error parsing Bard response:",e),{model:"bard-web",tokens:{total:85,prompt:40,completion:45},timestamp:o,energyPerToken:n}}}(0,o,n,r);default:return i.error("Unknown provider:",e),null}}catch(t){return i.error(`Error extracting tokens for ${e}:`,t),null}}(n,0,o);if(!r)return void i.error("Failed to extract token data for provider:",n);const a=(e=>{const t=1e-4*e;return{amount:t,confidence:{low:.8*t,high:1.2*t}}})(r.tokens.total,r.model),l={...r,emissions:a.amount,confidence:a.confidence};await async function(e){return new Promise((t,o)=>{try{const n=(new Date).toISOString().split("T")[0],r=`qarbon_emissions_${n}`;chrome.storage.local.get([r,"qarbon_settings","qarbon_queries"],s=>{if(chrome.runtime.lastError)return i.error("Storage get error:",chrome.runtime.lastError.message),void o(new Error(chrome.runtime.lastError.message));const a={id:crypto.randomUUID(),timestamp:e.timestamp||Date.now(),provider:e.provider||"unknown",model:e.model||"unknown",tokens:e.tokens||{total:0,prompt:0,completion:0},emissions:e.emissions||0,confidence:e.confidence||{low:0,high:0},url:e.url||"",sessionId:e.sessionId||"default"},c=s[r]||[];c.push(a);const l=s.qarbon_queries||{total:0,daily:{}};l.total=(l.total||0)+1,l.daily||(l.daily={});const m=l.daily;n&&(m[n]=(m[n]||0)+1),l.daily=m;const u={[r]:c,qarbon_queries:l,qarbon_last_updated:Date.now()};s.qarbon_settings||(u.qarbon_settings={trackingEnabled:!0,displayUnits:"kg",notifications:!0,dataRetentionDays:30}),chrome.storage.local.set(u,()=>{chrome.runtime.lastError?(i.error("Storage set error:",chrome.runtime.lastError.message),o(new Error(chrome.runtime.lastError.message))):(g(Object.keys(u)),i.log("Successfully stored emission data:",a),t())})})}catch(e){i.error("Error in storeEmissionData:",e),o(e)}})}(l),await async function(e){try{const t={type:"AI_TOKENS",data:{provider:e.provider||"unknown",model:e.model||"unknown",tokens:e.tokens||{total:0,prompt:0,completion:0},emissions:e.emissions||0,confidence:e.confidence||{low:0,high:0},timestamp:e.timestamp||Date.now(),energy:e.energy||0}};chrome.runtime.sendMessage(t).catch(e=>{i.log("No message receivers available:",e?.message)}),i.log("AI Token Data:",t.data)}catch(e){i.error("Error emitting token message:",e)}}(l),i.log("Successfully processed and stored API response data for:",n)}catch(e){i.error("Error processing API response:",e)}}else try{t.tab?.id&&(l.set(t.tab.id,{promptText:e.promptText||"",timestamp:Date.now(),url:t.tab.url||""}),i.log(`Stored prompt for tab ${t.tab.id}:`,e.promptText?.substring(0,100)+"..."))}catch(e){i.error("Error handling PROMPT_CAPTURE message:",e)}}),chrome.runtime.onInstalled.addListener(e=>{"install"===e.reason?chrome.storage.local.get(["qarbon_onboarded"],e=>{e.qarbon_onboarded||(chrome.tabs.create({url:chrome.runtime.getURL("onboarding.html")}),i.log("Opening onboarding for new install"))}):"update"===e.reason&&i.log("Extension updated to version:",a),chrome.tabs.query({},e=>{e.forEach(e=>{e.url&&["claude.ai","chatgpt.com","chat.openai.com","gemini.google.com","bard.google.com"].some(t=>e.url.includes(t))&&chrome.scripting.executeScript({target:{tabId:e.id},files:["content.js"]}).then(()=>{console.log(`Content script injected into existing tab: ${e.url}`)}).catch(()=>{})})})}),async function(){try{const e=await new Promise((e,t)=>{chrome.storage.local.get(null,o=>{chrome.runtime.lastError?t(new Error(chrome.runtime.lastError.message)):e(o)})});if(!e.qarbon_settings){const e={trackingEnabled:!0,displayUnits:"kg",notifications:!0,dataRetentionDays:30,installedAt:Date.now(),version:a};await new Promise((t,o)=>{chrome.storage.local.set({qarbon_settings:e},()=>{chrome.runtime.lastError?o(new Error(chrome.runtime.lastError.message)):(i.log("Initialized default settings"),t())})})}await async function(e){try{const t={};let o=0;for(const[n,r]of Object.entries(e))if(n.startsWith("qarbon_emissions_")&&Array.isArray(r)){const e=r.map(e=>{if(!e.confidence||"object"!=typeof e.confidence||void 0===e.confidence.low||void 0===e.confidence.high){const t={low:e.emissions?Math.max(0,.8*e.emissions):0,high:e.emissions?1.2*e.emissions:0};return o++,{...e,confidence:t}}return e});e.some((e,t)=>e.confidence!==r[t]?.confidence)&&(t[n]=e)}Object.keys(t).length>0&&await new Promise((e,n)=>{chrome.storage.local.set(t,()=>{chrome.runtime.lastError?n(new Error(chrome.runtime.lastError.message)):(i.log(`Successfully migrated ${o} emission entries with confidence data`),e())})})}catch(e){i.error("Error during storage migration:",e)}}(e),await async function(){try{const e=new Date,t=p(e),o=d(e),n={[`qarbon_aggregates_week_${t}`]:{period:"week",startDate:h(e).toISOString().split("T")[0],endDate:k(e).toISOString().split("T")[0],totalEmissions:0,totalQueries:0,confidence:{low:0,high:0},providerBreakdown:{},modelBreakdown:{},lastUpdated:Date.now(),version:a},[`qarbon_aggregates_month_${o}`]:{period:"month",startDate:w(e).toISOString().split("T")[0],endDate:f(e).toISOString().split("T")[0],totalEmissions:0,totalQueries:0,confidence:{low:0,high:0},providerBreakdown:{},modelBreakdown:{},lastUpdated:Date.now(),version:a},qarbon_popup_chart_week:{labels:[],emissions:[],queries:[],lastUpdated:Date.now()},qarbon_popup_chart_month:{labels:[],emissions:[],queries:[],lastUpdated:Date.now()}},r=await u(Object.keys(n)),s={};for(const[e,t]of Object.entries(n))r[e]||(s[e]=t);Object.keys(s).length>0&&await new Promise((e,t)=>{chrome.storage.local.set(s,()=>{chrome.runtime.lastError?t(new Error(chrome.runtime.lastError.message)):(g(Object.keys(s)),i.log(`Initialized ${Object.keys(s).length} aggregate placeholders`),e())})})}catch(e){i.error("Error initializing aggregate placeholders:",e)}}(),await y()}catch(e){i.error("Error initializing storage:",e)}}(),chrome.alarms.create("qarbon-cleanup",{delayInMinutes:60,periodInMinutes:1440}),chrome.alarms.create("qarbon-daily-aggregate",{when:Date.now()+3e5,periodInMinutes:1440});const b=function(){const e=new Date,t=(7-e.getDay())%7,o=new Date(e);return o.setDate(e.getDate()+t),o.setHours(0,0,0,0),o.getTime()}();chrome.alarms.create("qarbon-weekly-aggregate",{when:b,periodInMinutes:10080});const _=function(){const e=new Date,t=new Date(e.getFullYear(),e.getMonth()+1,1);return t.setHours(0,0,0,0),t.getTime()}();chrome.alarms.create("qarbon-monthly-aggregate",{when:_,periodInMinutes:43200}),chrome.alarms.create("qarbon-chart-update",{delayInMinutes:15,periodInMinutes:15}),chrome.alarms.create("qarbon-sync",{delayInMinutes:30,periodInMinutes:60}),chrome.alarms.onAlarm.addListener(e=>{"qarbon-cleanup"===e.name?y():"qarbon-daily-aggregate"===e.name?async function(){try{const e=(new Date).toISOString().split("T")[0],t=`qarbon_emissions_${e}`,o=`qarbon_aggregates_daily_${e}`,n=(await new Promise((e,o)=>{chrome.storage.local.get([t],t=>{chrome.runtime.lastError?o(new Error(chrome.runtime.lastError.message)):e(t)})}))[t]||[];if(0===n.length)return void i.log("No emissions data found for today, skipping aggregation");let r=0,s=0,c=n.length,l=0,m=0;const u={},g={};n.forEach(e=>{r+=e.emissions||0,s+=e.tokens?.total||0,e.confidence&&(l+=e.confidence.low||0,m+=e.confidence.high||0);const t=e.provider||"unknown",o=e.model||"unknown";u[t]=(u[t]||0)+1,g[o]=(g[o]||0)+1});const p={date:e,totalEmissions:r,totalTokens:s,totalQueries:c,confidence:{low:l,high:m},providerBreakdown:u,modelBreakdown:g,aggregatedAt:Date.now(),version:a};await new Promise((t,n)=>{chrome.storage.local.set({[o]:p},()=>{chrome.runtime.lastError?n(new Error(chrome.runtime.lastError.message)):(i.log(`Successfully aggregated daily emissions for ${e}:`,p),t())})})}catch(e){i.error("Error aggregating daily emissions:",e)}}():"qarbon-weekly-aggregate"===e.name?async function(){try{const e=new Date,t=p(e),o=h(new Date(e)),n=k(new Date(e)),r=[];for(let e=new Date(o);e<=n;e.setDate(e.getDate()+1)){const t=e.toISOString().split("T")[0];t&&r.push(t)}const s=r.map(e=>`qarbon_emissions_${e}`),c=await u(s);let l=0,m=0,d=0,w=0,f=0;const y={},b={};s.forEach(e=>{(c[e]||[]).forEach(e=>{l+=e.emissions||0,m+=e.tokens?.total||0,d+=1,e.confidence&&(w+=e.confidence.low||0,f+=e.confidence.high||0);const t=e.provider||"unknown",o=e.model||"unknown";y[t]||(y[t]={emissions:0,queries:0}),b[o]||(b[o]={emissions:0,queries:0}),y[t].emissions+=e.emissions||0,y[t].queries+=1,b[o].emissions+=e.emissions||0,b[o].queries+=1})});const _={period:"week",startDate:o.toISOString().split("T")[0],endDate:n.toISOString().split("T")[0],totalEmissions:l,totalTokens:m,totalQueries:d,confidence:{low:w,high:f},providerBreakdown:y,modelBreakdown:b,lastUpdated:Date.now(),version:a},E=`qarbon_aggregates_week_${t}`;await new Promise((e,o)=>{chrome.storage.local.set({[E]:_},()=>{chrome.runtime.lastError?o(new Error(chrome.runtime.lastError.message)):(g([E]),i.log(`Successfully aggregated weekly emissions for ${t}:`,_),e())})})}catch(e){i.error("Error aggregating weekly emissions:",e)}}():"qarbon-monthly-aggregate"===e.name?async function(){try{const e=new Date,t=d(e),o=w(e),n=f(e),r=[];for(let e=new Date(o);e<=n;e.setDate(e.getDate()+1)){const t=e.toISOString().split("T")[0];t&&r.push(t)}const s=r.map(e=>`qarbon_emissions_${e}`),c=await u(s);let l=0,m=0,p=0,h=0,k=0;const y={},b={};s.forEach(e=>{(c[e]||[]).forEach(e=>{l+=e.emissions||0,m+=e.tokens?.total||0,p+=1,e.confidence&&(h+=e.confidence.low||0,k+=e.confidence.high||0);const t=e.provider||"unknown",o=e.model||"unknown";y[t]||(y[t]={emissions:0,queries:0}),b[o]||(b[o]={emissions:0,queries:0}),y[t].emissions+=e.emissions||0,y[t].queries+=1,b[o].emissions+=e.emissions||0,b[o].queries+=1})});const _={period:"month",startDate:o.toISOString().split("T")[0],endDate:n.toISOString().split("T")[0],totalEmissions:l,totalTokens:m,totalQueries:p,confidence:{low:h,high:k},providerBreakdown:y,modelBreakdown:b,lastUpdated:Date.now(),version:a},E=`qarbon_aggregates_month_${t}`;await new Promise((e,o)=>{chrome.storage.local.set({[E]:_},()=>{chrome.runtime.lastError?o(new Error(chrome.runtime.lastError.message)):(g([E]),i.log(`Successfully aggregated monthly emissions for ${t}:`,_),e())})})}catch(e){i.error("Error aggregating monthly emissions:",e)}}():"qarbon-chart-update"===e.name?async function(){try{const e=[],t=[],o=[],n=new Date,r=[];for(let t=6;t>=0;t--){const o=new Date(n);o.setDate(n.getDate()-t);const s=o.toISOString().split("T")[0];s&&(r.push(s),e.push(o.toLocaleDateString("en-US",{weekday:"short"})))}const s=r.map(e=>`qarbon_emissions_${e}`),a=await u(s);r.forEach(e=>{const n=a[`qarbon_emissions_${e}`]||[];let r=0,s=n.length;n.forEach(e=>{r+=e.emissions||0}),t.push(r),o.push(s)});const c=[],l=[],m=[],p=[];for(let e=29;e>=0;e--){const t=new Date(n);t.setDate(n.getDate()-e);const o=t.toISOString().split("T")[0];o&&(p.push(o),c.push(t.toLocaleDateString("en-US",{day:"numeric"})))}const d=p.map(e=>`qarbon_emissions_${e}`),h=await u(d);p.forEach(e=>{const t=h[`qarbon_emissions_${e}`]||[];let o=0,n=t.length;t.forEach(e=>{o+=e.emissions||0}),l.push(o),m.push(n)});const k={qarbon_popup_chart_week:{labels:e,emissions:t,queries:o,lastUpdated:Date.now()},qarbon_popup_chart_month:{labels:c,emissions:l,queries:m,lastUpdated:Date.now()}};await new Promise((e,t)=>{chrome.storage.local.set(k,()=>{chrome.runtime.lastError?t(new Error(chrome.runtime.lastError.message)):(g(Object.keys(k)),i.log("Successfully updated popup chart data"),e())})})}catch(e){i.error("Error updating popup chart data:",e)}}():"qarbon-sync"===e.name&&async function(){try{i.log("Cloud sync triggered (stub implementation)");const e=new Date;e.setDate(e.getDate()-7);const t=e.toISOString().split("T")[0],o=await new Promise((e,t)=>{chrome.storage.local.get(null,o=>{chrome.runtime.lastError?t(new Error(chrome.runtime.lastError.message)):e(o)})}),n={};Object.keys(o).forEach(e=>{if(e.startsWith("qarbon_emissions_")||e.startsWith("qarbon_aggregates_daily_")){const r=e.split("_").pop();r&&t&&r>=t&&(n[e]=o[e])}}),o.qarbon_settings&&(n.qarbon_settings=o.qarbon_settings),o.qarbon_queries&&(n.qarbon_queries=o.qarbon_queries),i.log(`Cloud sync prepared ${Object.keys(n).length} data entries for sync`),await new Promise((e,t)=>{chrome.storage.local.set({qarbon_last_sync:Date.now()},()=>{chrome.runtime.lastError?t(new Error(chrome.runtime.lastError.message)):e()})})}catch(e){i.error("Error in cloud sync:",e)}}()});const E="#4CAF50";async function D(){try{const{total:e,color:t}=await async function(){try{const e=`qarbon_emissions_${(new Date).toISOString().split("T")[0]}`,t=(await new Promise((t,o)=>{chrome.storage.local.get([e],e=>{chrome.runtime.lastError?o(new Error(chrome.runtime.lastError.message)):t(e)})}))[e]||[];let o=0;t.forEach(e=>{o+=e.emissions||0});const n=1e3*o;let r;return r=n<5?E:n<15?"#FFC107":n<30?"#FF9800":"#F44336",{total:n,color:r}}catch(e){return i.error("Error calculating today emissions:",e),{total:0,color:E}}}();let o="";e>0&&(o=e<1?"<1g":e<1e3?`${Math.round(e)}g`:`${Math.round(e/1e3)}kg`),await chrome.action.setBadgeText({text:o}),await chrome.action.setBadgeBackgroundColor({color:t}),i.log(`Badge updated: ${o} (${t})`)}catch(e){i.error("Error updating badge:",e)}}chrome.action.onClicked.addListener(async e=>{try{await chrome.action.openPopup(),i.log("Popup opened via action click")}catch(e){i.error("Failed to open popup:",e)}}),chrome.storage.onChanged.addListener((e,t)=>{"local"===t&&e[`qarbon_emissions_${(new Date).toISOString().split("T")[0]}`]&&(i.log("Emission data changed, updating badge"),D())}),chrome.runtime.onMessage.addListener((e,t,o)=>{"AI_TOKENS"!==e.type&&"EMISSION_UPDATED"!==e.type||D()}),chrome.tabs.onUpdated.addListener((e,t,o)=>{"complete"===t.status&&o.url&&["claude.ai","chatgpt.com","chat.openai.com","gemini.google.com","bard.google.com"].some(e=>o.url.includes(e))&&chrome.scripting.executeScript({target:{tabId:e},files:["content.js"]}).then(()=>{console.log(`Content script injected into ${o.url}`)}).catch(e=>{console.error("Failed to inject content script:",e)})}),D(),console.log("QarbonQuery Extension Background Script loaded")})();